<script src="https://unpkg.com/aframe-environment-component@1.2.0/dist/aframe-environment-component.min.js"></script>
<style>
  a-scene {
  height: 100%;
  width: 100%;
}
</style>
<div id='main1' class="row">
  <div id="replace" class="col">
   
      <% records.forEach(function(record){ %>
        <%- include("./partials/editEnvironmentCard.ejs",{record:record}) %>
          <% }) %>

    
  </div>
    
</div>

<script>
     /* global AFRAME */
     AFRAME.registerComponent('play-on-click', {
        init: function () {
          this.onClick = this.onClick.bind(this);
        },
        play: function () {
          window.addEventListener('click', this.onClick);
        },
        pause: function () {
          window.removeEventListener('click', this.onClick);
        },
        onClick: function (evt) {
          var videoEl = this.el.getAttribute('material').src;
          if (!videoEl) { return; }
          this.el.object3D.visible = true;
          videoEl.play();
        }
      });

  var env =<%- JSON.stringify(records) %>[0];
  console.log(env)
  
  // Preview function
  const createWorld = function (environment, options) {
    _objectCreator = function (vrObject) {
      console.log(vrObject._position)
      let tAsset = $(
        `<a-asset-item  id="${vrObject.name}" src="${vrObject.url}"></a-asset-item>`
      );
      $("#assets").append(tAsset);
      let tEntity = $(
        `<a-entity scale="${vrObject._scale[0]} ${vrObject._scale[1]} ${vrObject._scale[2]}" rotation="${vrObject._rotation[0]} ${vrObject._rotation[1]} ${vrObject._rotation[2]}" position="${vrObject._position[0]} ${vrObject._position[1]} ${vrObject._position[2]}" gltf-model="#${vrObject.name}"></a-entity>`
      );
      $("#mainScene").append(tEntity);

      // document
      //   .querySelector("a-entity")
      //   .addEventListener("click", function (evt) {
      //     console.log("This A-Frame entity collided with another entity!");
      //   });
    }

    _videoSceneCreator = function (videoOptions) {
      let videoAsset = $(
        `<video id="video"
             autoplay loop
             crossorigin="anonymous"
             playsinline webkit-playsinline
             src="${videoOptions}">
      </video>`)
      $("#assets").append(videoAsset);

      let videoSphere = $(`<a-videosphere
      rotation="0 -90 0" src="#video"
      play-on-click>
    </a-videosphere>`)

      $("#mainScene").append(videoSphere);

      let videoEntity =$(`<a-entity
        position="0 0 -1.5"
        text="align:center;
              width:6;
              wrapCount:100;
              color: white;
              value: Click or tap to start video"
        hide-on-play="#video">
      </a-entity>`);
      $('#cam').append(videoEntity)
    
    }




    /// SETUP THE WORLD
    if (options.preset) {
      document.getElementById('mainScene').setAttribute('environment', `preset:${options.preset}`)
      if(environment._vrObject){
        environment._vrObject.forEach(vrObject => {
          console.log(vrObject)
        _objectCreator(vrObject)
      })
      }
      
    } else if (options.video) {

      _videoSceneCreator(options.video)
    } else if (options.panorama) {

      let skyAsset = $(`<a-sky id="sky" src="${options.skyAsset.url}" rotation="0 -130 0"></a-sky>`)
      $("#mainScene").append(skyAsset);

    } else {
      let skyAsset = $(
        `<a-sky id="sky" color="${options.skyAsset.color}"></a-sky>`
      );
      let planeAsset = $(
        `<a-plane id="plane"  position="0 0 -4"
        rotation="-90 0 0"
        scale="100 100 100"
        width="100"
        height="100"
        color="${options.floorAsset.color}"></a-plane>`

      );
      $("#mainScene").append(skyAsset);
      $("#mainScene").append(planeAsset);

      // POPULATE THE WORLD
      console.log(typeof environment._vrObject)
      console.log( environment._vrObject)


      if(environment._vrObject){
        console.log("I'm here")
        environment._vrObject.forEach(vrObject => {
          
        _objectCreator(vrObject)
      })
      }

    }

  }
  // End of preview function

  


  $(document).on('click', '.waves-effect.waves-light.btn.delete', function (e) {
    e.preventDefault();
    let id = $(this).attr('id');
    let obj_id = {
      obj_id: id
    }
    $.ajax({
      type: 'DELETE',
      url: '/api/deleteObject',
      data: obj_id,
      success: (res) => {
        console.log(res)
        location.reload();
      },
      dataType: 'json',
    });
  });
  // Trigger Modal
  document.addEventListener('DOMContentLoaded', function (e) {
    e.preventDefault();
    var elems = document.querySelectorAll('.modal');
    var instances = M.Modal.init(elems);

  });
  // Upload 3dObject
  $(document).on('click', '.waves-effect.waves-light.btn.add-obj', function (e) {
    e.preventDefault();
    let id = $(this).attr('id');

    let name = $('#obj_name').val();
    let position_x = $('#obj_position_x').val();
    let position_y = $('#obj_position_y').val();
    let position_z = $('#obj_position_z').val();
    let scale_x = $('#obj_scale_x').val();
    let scale_y = $('#obj_scale_y').val();
    let scale_z = $('#obj_scale_z').val();
    let rotation_x = $('#obj_rotation_x').val();
    let rotation_y = $('#obj_rotation_y').val();
    let rotation_z = $('#obj_rotation_z').val();

    let position = position_x.concat(" ",position_y," ",position_z)
    let scale = scale_x.concat(" ",scale_y," ",scale_z)
    let rotation = rotation_x.concat(" ",rotation_y," ",rotation_z)
    let url = $('#obj_url').val();

    let vrObject = {
      name,
      position,
      scale,
      rotation,
      url
    }

    let data = {
      id, vrObject

    }
    $.ajax({
      type: 'PUT',
      url: '/api/addObjects',
      data: data,
      success: (res) => {
        console.log(res)
        location.reload();
      },
      dataType: 'json',
    });

  });
  // Update Object
  $(document).on('click', '.waves-effect.waves-light.btn.update', function (e) {
    e.preventDefault();
    let id = $(this).attr('id');


    let name = $('#obj_name' + id).val();
    let position_x = $('#obj_position_x' + id).val();
    let position_y = $('#obj_position_y' + id).val();
    let position_z = $('#obj_position_z' + id).val();
    let scale_x = $('#obj_scale_x' + id).val();
    let scale_y = $('#obj_scale_y' + id).val();
    let scale_z = $('#obj_scale_z' + id).val();
    let rotation_x = $('#obj_rotation_x' + id).val();
    let rotation_y = $('#obj_rotation_y' + id).val();
    let rotation_z = $('#obj_rotation_z' + id).val();
    let url = $('#obj_url' + id).val();

    let position = position_x.concat(" ",position_y," ",position_z)
    let scale = scale_x.concat(" ",scale_y," ",scale_z)
    let rotation = rotation_x.concat(" ",rotation_y," ",rotation_z)

    let vrObject = {
      name,
      position,
      scale,
      rotation,
      url
    }
    const env_id = <%- JSON.stringify(records[0]) %>._id;
    let data = {
      env_id, id, vrObject
    }
    console.log(env_id)

    $.ajax({
      type: 'PUT',
      url: '/api/updateObject',
      data: data,
      success: (res) => {
        console.log(res)
        // location.reload();
      },
      dataType: 'json',
    });
  });
  // Append obj url in modal
  $(document).on('change', '#3dobj_select', function () {
    $('#obj_url').attr('value', this.value)

  })
  $(document).on('change', '.browser-default.update', function () {
    let id = $(this).parent().siblings().last().children().children('input').attr('id')
    console.log(id)
    $('#' + id).attr('value', this.value)


  })
  $(document).ready(function () {
    getObjects();
  });

  const getObjects =()=>{
    $.ajax({
      url: "/aws/obj/list/",
      type: 'GET',
      dataType: 'json', // added data type
      success: function (res) {
        res.objects.forEach(element => {
          console.log(element.filename)
          $('.browser-default.models',).append(`<option value="${element.url}">${element.filename}</option>`)
        });

      }
    });
  }



  $(document).on('click', '.btn.waves-effect.waves-light.file', function (e) {
    

    let file = $("#file")[0].files[0]
    console.log(file)
    let formData = new FormData();
    formData.append('file', file);
    console.log(formData)
    // Saving files in s3bucket and getting a url back
    fetch('http://localhost:3001/aws/obj/upload/', {
      method: 'POST',
      body: formData,
    })
      .then((resp) => resp.json())
      .then((data) => {
        if (data.errors) {
          alert(data.errors);
        } else {
          let url = data.url;

          location.reload();
        }
      });
  });
  // Update Envionment details
  $(document).on('click','.btn.waves-effect.waves-light.upd_env',function(){
    const id =<%- JSON.stringify(records) %>[0]._id;

    const name = $('#name').val()
    const creator =$('#creator').val()
    const panorama =$('#panorama').val()
    const preset = $('#preset').val()
    const video =$('#video').val()
    const skyColor =$('#skyColor').val()
    const skyUrl =$('#skyUrl').val()
    const floorColor =$('#floorColor').val()
    const floorUrl = $('#floorUrl').val()

    const skyAsset ={
      color:skyColor,
      url:skyUrl
    }
    const floorAsset ={
      color:floorColor,
      url:floorUrl
    }
    const environmentOptions ={
      panorama,
      preset,
      video,
      skyAsset,
      floorAsset
    }

    const data ={
      id:id,
      envionmentName:name,
      environmentCreator:creator,
      environmentOptions,
    }
    $.ajax({
      url: "/api/updateEnvironment",
      type: 'PUT',
      data: data,
      dataType: 'json', // added data type
      success: function (res) {
        console.log(res)
        location.reload();
      }
    });

  });

  $(document).on('change', '#video_select', function () {
    $('#video').attr('value', this.value)

  })
  $(document).on('change', '#preset_select', function () {
    $('#preset').attr('value', this.value)

  })
  
  $(document).on('click', '.filled-in', function (e) {
    let val = $("input:checked").val()
    console.log(val)
  })


  window.onload = (event) => {
  remove();
};

const remove=()=>{
  $('.remove').detach();
}

const preview =()=>{
    
  createWorld(env, env.environmentOptions)
    
}

$(document).on('click', '#preview', function (e) {
  e.preventDefault();
  const scene =$(`<div id="scene" class="col-6" >
    
    <a-scene id="mainScene" embedded background="color:black">
  <a-assets id="assets"> </a-assets>
  <a-camera position="0 1.6 0"></a-camera>
</a-scene>
  
    
  </div>`);
  

    $('.toggle').toggle()
    $('#margin-left').siblings('#center').toggleClass('col-8')
   

    if($('#scene').attr('class')==undefined){
      scene.appendTo('#main1')
      
      
      // Calling preview function
      preview();
      
    }else{
      $('#scene').detach();
      
    }
    $('#preview').text(function(i, text){
          return text === "preview" ? "end preview" : "preview";
      })


    if($('#replace').attr('class')=="col"){
      $('#replace').attr('class','col-6')
    }else{
      $('#replace').attr('class','col')
    }
  
  })
</script>